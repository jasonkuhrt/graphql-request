"""Enum documentation."""
enum ABCEnum {
  A @deprecated(reason: "Enum value A is deprecated.")

  """Enum B member documentation."""
  B
  C @deprecated(reason: "Enum value C is deprecated.")
}

type Bar {
  int: Int
}

enum Case {
  ErrorOne
  ErrorTwo
  Object1
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar Date

interface DateInterface1 {
  date1: Date
}

type DateObject1 implements DateInterface1 {
  date1: Date
}

type DateObject2 {
  date2: Date
}

union DateUnion = DateObject1 | DateObject2

interface Error {
  message: String!
}

type ErrorOne implements Error {
  infoId: ID
  message: String!
}

type ErrorTwo implements Error {
  infoInt: Int
  message: String!
}

"""Object documentation."""
type Foo {
  """Field documentation."""
  id: ID @deprecated(reason: "Field a is deprecated.")
}

"""Union documentation."""
union FooBarUnion = Bar | Foo

input InputObject {
  date: Date
  dateRequired: Date!
  id: ID
  idRequired: ID!
}

input InputObjectCircular {
  circular: InputObjectCircular
  date: Date
}

input InputObjectNested {
  InputObject: InputObject
}

input InputObjectNestedNonNull {
  InputObject: InputObject!
}

interface Interface {
  id: ID
}

type Mutation {
  id: ID
  idNonNull: ID!
}

type Object1 {
  boolean: Boolean
  float: Float
  id: ID
  int: Int
  string: String
}

type Object1ImplementingInterface implements Interface {
  id: ID
  int: Int
}

type Object2ImplementingInterface implements Interface {
  boolean: Boolean
  id: ID
}

type ObjectNested {
  id: ID
  object: Object1
}

type ObjectUnion {
  fooBarUnion: FooBarUnion
}

type Query {
  InputObjectNested(input: InputObjectNested): ID
  InputObjectNestedNonNull(input: InputObjectNestedNonNull!): ID

  """Query enum field documentation."""
  abcEnum: ABCEnum
  argInputObjectCircular(input: InputObjectCircular): String
  date: Date
  dateArg(date: Date): Date
  dateArgInputObject(input: InputObject): Date
  dateArgList(date: [Date!]): Date
  dateArgNonNull(date: Date!): Date
  dateArgNonNullList(date: [Date]!): Date
  dateArgNonNullListNonNull(date: [Date!]!): Date
  dateInterface1: DateInterface1
  dateList: [Date!]
  dateListList: [[Date!]!]
  dateListNonNull: [Date!]!
  dateNonNull: Date!
  dateObject1: DateObject1
  dateUnion: DateUnion
  error(case: String): String
  id: ID
  idNonNull: ID!
  interface: Interface
  interfaceNonNull: Interface!
  interfaceWithArgs(id: ID!): Interface
  listInt: [Int]
  listIntNonNull: [Int!]!
  listListInt: [[Int]]
  listListIntNonNull: [[Int!]!]!
  lowerCaseUnion: lowerCaseUnion
  object: Object1
  objectList: [Object1!]
  objectListNonNull: [Object1!]!
  objectNested: ObjectNested
  objectNonNull: Object1!
  objectWithArgs(boolean: Boolean, float: Float, id: ID, int: Int, string: String): Object1
  result(case: Case!): Result
  resultNonNull(case: Case): Result!
  string: String
  stringWithArgEnum(ABCEnum: ABCEnum): String
  stringWithArgInputObject(input: InputObject): String
  stringWithArgInputObjectRequired(input: InputObject!): String

  """The given arguments are reflected back as a JSON string."""
  stringWithArgs(boolean: Boolean, float: Float, id: ID, int: Int, string: String): String
  stringWithListArg(ints: [Int]): String
  stringWithListArgRequired(ints: [Int!]!): String
  stringWithRequiredArg(string: String!): String
  unionFooBar: FooBarUnion
  unionFooBarNonNull: FooBarUnion!
  unionFooBarWithArgs(id: ID): FooBarUnion
  unionObject: ObjectUnion
  unionObjectNonNull: ObjectUnion!
}

union Result = ErrorOne | ErrorTwo | Object1

type lowerCaseObject {
  id: ID
}

type lowerCaseObject2 {
  int: Int
}

union lowerCaseUnion = lowerCaseObject | lowerCaseObject2